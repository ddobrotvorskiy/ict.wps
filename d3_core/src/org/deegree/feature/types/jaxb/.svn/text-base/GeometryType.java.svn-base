//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-792 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2009.10.06 at 05:10:14 PM MESZ 
//


package org.deegree.feature.types.jaxb;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for GeometryType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="GeometryType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="Geometry"/>
 *     &lt;enumeration value="PrimitiveGeometry"/>
 *     &lt;enumeration value="CompositeGeometry"/>
 *     &lt;enumeration value="Point"/>
 *     &lt;enumeration value="Curve"/>
 *     &lt;enumeration value="LineString"/>
 *     &lt;enumeration value="Ring"/>
 *     &lt;enumeration value="LinearRing"/>
 *     &lt;enumeration value="OrientableCurve"/>
 *     &lt;enumeration value="CompositeCurve"/>
 *     &lt;enumeration value="Surface"/>
 *     &lt;enumeration value="PolyhedralSurface"/>
 *     &lt;enumeration value="TriangulatedSurface"/>
 *     &lt;enumeration value="Tin"/>
 *     &lt;enumeration value="Polygon"/>
 *     &lt;enumeration value="OrientableSurface"/>
 *     &lt;enumeration value="CompositeSurface"/>
 *     &lt;enumeration value="Solid"/>
 *     &lt;enumeration value="CompositeSolid"/>
 *     &lt;enumeration value="MultiGeometry"/>
 *     &lt;enumeration value="MultiPoint"/>
 *     &lt;enumeration value="MultiCurve"/>
 *     &lt;enumeration value="MultiLineString"/>
 *     &lt;enumeration value="MultiSurface"/>
 *     &lt;enumeration value="MultiPolygon"/>
 *     &lt;enumeration value="MultiSolid"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "GeometryType")
@XmlEnum
public enum GeometryType {

    @XmlEnumValue("Geometry")
    GEOMETRY("Geometry"),
    @XmlEnumValue("PrimitiveGeometry")
    PRIMITIVE_GEOMETRY("PrimitiveGeometry"),
    @XmlEnumValue("CompositeGeometry")
    COMPOSITE_GEOMETRY("CompositeGeometry"),
    @XmlEnumValue("Point")
    POINT("Point"),
    @XmlEnumValue("Curve")
    CURVE("Curve"),
    @XmlEnumValue("LineString")
    LINE_STRING("LineString"),
    @XmlEnumValue("Ring")
    RING("Ring"),
    @XmlEnumValue("LinearRing")
    LINEAR_RING("LinearRing"),
    @XmlEnumValue("OrientableCurve")
    ORIENTABLE_CURVE("OrientableCurve"),
    @XmlEnumValue("CompositeCurve")
    COMPOSITE_CURVE("CompositeCurve"),
    @XmlEnumValue("Surface")
    SURFACE("Surface"),
    @XmlEnumValue("PolyhedralSurface")
    POLYHEDRAL_SURFACE("PolyhedralSurface"),
    @XmlEnumValue("TriangulatedSurface")
    TRIANGULATED_SURFACE("TriangulatedSurface"),
    @XmlEnumValue("Tin")
    TIN("Tin"),
    @XmlEnumValue("Polygon")
    POLYGON("Polygon"),
    @XmlEnumValue("OrientableSurface")
    ORIENTABLE_SURFACE("OrientableSurface"),
    @XmlEnumValue("CompositeSurface")
    COMPOSITE_SURFACE("CompositeSurface"),
    @XmlEnumValue("Solid")
    SOLID("Solid"),
    @XmlEnumValue("CompositeSolid")
    COMPOSITE_SOLID("CompositeSolid"),
    @XmlEnumValue("MultiGeometry")
    MULTI_GEOMETRY("MultiGeometry"),
    @XmlEnumValue("MultiPoint")
    MULTI_POINT("MultiPoint"),
    @XmlEnumValue("MultiCurve")
    MULTI_CURVE("MultiCurve"),
    @XmlEnumValue("MultiLineString")
    MULTI_LINE_STRING("MultiLineString"),
    @XmlEnumValue("MultiSurface")
    MULTI_SURFACE("MultiSurface"),
    @XmlEnumValue("MultiPolygon")
    MULTI_POLYGON("MultiPolygon"),
    @XmlEnumValue("MultiSolid")
    MULTI_SOLID("MultiSolid");
    private final String value;

    GeometryType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static GeometryType fromValue(String v) {
        for (GeometryType c: GeometryType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
