
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Jan 07 12:53:01 CET 2010
//----------------------------------------------------

package org.deegree.commons.utils.templating;

import java.util.HashMap;
import java.util.LinkedList;
import java_cup.runtime.*;
import org.deegree.commons.utils.*;

/** CUP v0.10k generated parser.
  * @version Thu Jan 07 12:53:01 CET 2010
  */
public class TemplatingParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public TemplatingParser() {super();}

  /** Constructor which sets the default scanner. */
  public TemplatingParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\015\000\002\003\004\000\002\002\004\000\002\003" +
    "\005\000\002\003\004\000\002\003\005\000\002\004\004" +
    "\000\002\004\004\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\004\000\002\005\004\000\002" +
    "\005\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\021\000\006\006\006\007\005\001\002\000\004\002" +
    "\023\001\002\000\004\004\017\001\002\000\010\004\007" +
    "\005\010\010\011\001\002\000\016\002\ufffa\004\007\005" +
    "\010\006\ufffa\007\ufffa\010\011\001\002\000\016\002\ufff9" +
    "\004\007\005\010\006\ufff9\007\ufff9\010\011\001\002\000" +
    "\016\002\ufff8\004\007\005\010\006\ufff8\007\ufff8\010\011" +
    "\001\002\000\010\002\001\006\006\007\005\001\002\000" +
    "\004\002\uffff\001\002\000\010\002\ufff7\006\ufff7\007\ufff7" +
    "\001\002\000\010\002\ufffb\006\ufffb\007\ufffb\001\002\000" +
    "\010\002\ufffc\006\ufffc\007\ufffc\001\002\000\012\002\ufff5" +
    "\004\017\006\ufff5\007\ufff5\001\002\000\010\002\ufffe\006" +
    "\006\007\005\001\002\000\004\002\ufffd\001\002\000\010" +
    "\002\ufff6\006\ufff6\007\ufff6\001\002\000\004\002\000\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\021\000\004\003\003\001\001\000\002\001\001\000" +
    "\004\005\017\001\001\000\004\004\011\001\001\000\004" +
    "\004\015\001\001\000\004\004\014\001\001\000\004\004" +
    "\013\001\001\000\004\003\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\021\001\001\000\004\003\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$TemplatingParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$TemplatingParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$TemplatingParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$TemplatingParser$actions {
  private final TemplatingParser parser;

  /** Constructor */
  CUP$TemplatingParser$actions(TemplatingParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$TemplatingParser$do_action(
    int                        CUP$TemplatingParser$act_num,
    java_cup.runtime.lr_parser CUP$TemplatingParser$parser,
    java.util.Stack            CUP$TemplatingParser$stack,
    int                        CUP$TemplatingParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$TemplatingParser$result;

      /* select the action based on the action number */
      switch (CUP$TemplatingParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // map ::= TEXT_TOKEN 
            {
              Object RESULT = null;
		int textleft = ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-0)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-0)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-0)).value;
		 RESULT = text; 
              CUP$TemplatingParser$result = new java_cup.runtime.Symbol(3/*map*/, ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-0)).right, RESULT);
            }
          return CUP$TemplatingParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // map ::= TEXT_TOKEN map 
            {
              Object RESULT = null;
		int textleft = ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-1)).value;
		int restleft = ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-0)).left;
		int restright = ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-0)).right;
		Object rest = (Object)((java_cup.runtime.Symbol) CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-0)).value;
		 RESULT = text + ((String)rest); 
              CUP$TemplatingParser$result = new java_cup.runtime.Symbol(3/*map*/, ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-0)).right, RESULT);
            }
          return CUP$TemplatingParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tmplortext ::= MAP_CALL_TOKEN tmplortext 
            {
              Object RESULT = null;
		int callleft = ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-1)).left;
		int callright = ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-1)).right;
		Object call = (Object)((java_cup.runtime.Symbol) CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-1)).value;
		int restleft = ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-0)).left;
		int restright = ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-0)).right;
		Object rest = (Object)((java_cup.runtime.Symbol) CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-0)).value;
		 String s = (String)call;
                                                       int idx = s.lastIndexOf(":");
                                                       if(rest instanceof LinkedList) ((LinkedList)rest).addFirst(new StringPair(s.substring(0, idx), s.substring(idx + 1, s.length())));
                                                       RESULT = rest; 
              CUP$TemplatingParser$result = new java_cup.runtime.Symbol(2/*tmplortext*/, ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-0)).right, RESULT);
            }
          return CUP$TemplatingParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tmplortext ::= MAP_CALL_TOKEN 
            {
              Object RESULT = null;
		int callleft = ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-0)).left;
		int callright = ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-0)).right;
		Object call = (Object)((java_cup.runtime.Symbol) CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-0)).value;
		 RESULT = new LinkedList();
                                                       String s = (String)call;
                                                       int idx = s.lastIndexOf(":");
                                                       ((LinkedList)RESULT).add(new StringPair(s.substring(0, idx), s.substring(idx + 1, s.length()))); 
              CUP$TemplatingParser$result = new java_cup.runtime.Symbol(2/*tmplortext*/, ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-0)).right, RESULT);
            }
          return CUP$TemplatingParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tmplortext ::= TEMPLATE_CALL_TOKEN 
            {
              Object RESULT = null;
		int callleft = ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-0)).left;
		int callright = ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-0)).right;
		Object call = (Object)((java_cup.runtime.Symbol) CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-0)).value;
		 RESULT = new LinkedList();
                                                       String s = (String)call;
                                                       int idx = s.lastIndexOf(":");
                                                       ((LinkedList)RESULT).add(new StringPair(s.substring(0, idx), s.substring(idx + 1, s.length()))); 
              CUP$TemplatingParser$result = new java_cup.runtime.Symbol(2/*tmplortext*/, ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-0)).right, RESULT);
            }
          return CUP$TemplatingParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tmplortext ::= TEXT_TOKEN 
            {
              Object RESULT = null;
		int textleft = ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-0)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-0)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-0)).value;
		 RESULT = new LinkedList();
                                                       ((LinkedList)RESULT).add(text); 
              CUP$TemplatingParser$result = new java_cup.runtime.Symbol(2/*tmplortext*/, ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-0)).right, RESULT);
            }
          return CUP$TemplatingParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // tmplortext ::= TEMPLATE_CALL_TOKEN tmplortext 
            {
              Object RESULT = null;
		int callleft = ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-1)).left;
		int callright = ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-1)).right;
		Object call = (Object)((java_cup.runtime.Symbol) CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-1)).value;
		int restleft = ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-0)).left;
		int restright = ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-0)).right;
		Object rest = (Object)((java_cup.runtime.Symbol) CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-0)).value;
		 if(rest instanceof Exception){
                                                         RESULT = rest;
                                                       }else{
                                                         String s = (String)call;
                                                         int idx = s.lastIndexOf(":");
                                                         if(rest instanceof LinkedList) ((LinkedList)rest).addFirst(new StringPair(s.substring(0, idx), s.substring(idx + 1, s.length())));
                                                         RESULT = rest;
                                                       } 
              CUP$TemplatingParser$result = new java_cup.runtime.Symbol(2/*tmplortext*/, ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-0)).right, RESULT);
            }
          return CUP$TemplatingParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // tmplortext ::= TEXT_TOKEN tmplortext 
            {
              Object RESULT = null;
		int textleft = ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-1)).value;
		int restleft = ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-0)).left;
		int restright = ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-0)).right;
		Object rest = (Object)((java_cup.runtime.Symbol) CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-0)).value;
		 if(rest instanceof LinkedList){
                                                         if(((LinkedList)rest).peek() instanceof String){
                                                           ((LinkedList)rest).addFirst(((String)text) + ((String)((LinkedList)rest).poll()));
                                                         }else{
                                                           ((LinkedList)rest).addFirst(text);
                                                         }
                                                       }
                                                       RESULT = rest; 
              CUP$TemplatingParser$result = new java_cup.runtime.Symbol(2/*tmplortext*/, ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-0)).right, RESULT);
            }
          return CUP$TemplatingParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // definition ::= MAP_DEFINITION_TOKEN map definition 
            {
              Object RESULT = null;
		int defleft = ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-2)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-2)).right;
		Object def = (Object)((java_cup.runtime.Symbol) CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-2)).value;
		int mapleft = ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-1)).left;
		int mapright = ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-1)).right;
		Object map = (Object)((java_cup.runtime.Symbol) CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-1)).value;
		int defsleft = ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-0)).left;
		int defsright = ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-0)).right;
		Object defs = (Object)((java_cup.runtime.Symbol) CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-0)).value;
		 String[] ss = ((String)map).split("\n");
                                                                            HashMap res = new HashMap();
                                                                            for(String s : ss){
                                                                              s = s.trim();
                                                                              int idx = s.lastIndexOf("=");
                                                                              if(!s.isEmpty()) res.put(s.substring(0, idx), s.substring(idx + 1, s.length()));
                                                                            }
                                                                            ((HashMap)defs).put(def, res);
                                                                            RESULT = defs; 
              CUP$TemplatingParser$result = new java_cup.runtime.Symbol(1/*definition*/, ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-0)).right, RESULT);
            }
          return CUP$TemplatingParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // definition ::= MAP_DEFINITION_TOKEN map 
            {
              Object RESULT = null;
		int defleft = ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-1)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-1)).right;
		Object def = (Object)((java_cup.runtime.Symbol) CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-1)).value;
		int mapleft = ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-0)).left;
		int mapright = ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-0)).right;
		Object map = (Object)((java_cup.runtime.Symbol) CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-0)).value;
		 RESULT = new HashMap();
                                                                            String[] ss = ((String)map).split("\n");
                                                                            HashMap res = new HashMap();
                                                                            for(String s : ss){
                                                                              s = s.trim();
                                                                              int idx = s.lastIndexOf("=");
                                                                              if(!s.isEmpty()) res.put(s.substring(0, idx), s.substring(idx + 1, s.length()));
                                                                            }
                                                                            ((HashMap)RESULT).put(def, res); 
              CUP$TemplatingParser$result = new java_cup.runtime.Symbol(1/*definition*/, ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-0)).right, RESULT);
            }
          return CUP$TemplatingParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // definition ::= TEMPLATE_DEFINITION_TOKEN tmplortext definition 
            {
              Object RESULT = null;
		int defleft = ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-2)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-2)).right;
		Object def = (Object)((java_cup.runtime.Symbol) CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-1)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-1)).value;
		int defsleft = ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-0)).left;
		int defsright = ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-0)).right;
		Object defs = (Object)((java_cup.runtime.Symbol) CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-0)).value;
		 if(defs instanceof HashMap) ((HashMap)defs).put(def, list);
                                                                            RESULT = defs; 
              CUP$TemplatingParser$result = new java_cup.runtime.Symbol(1/*definition*/, ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-0)).right, RESULT);
            }
          return CUP$TemplatingParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= definition EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-1)).value;
		RESULT = start_val;
              CUP$TemplatingParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$TemplatingParser$parser.done_parsing();
          return CUP$TemplatingParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // definition ::= TEMPLATE_DEFINITION_TOKEN tmplortext 
            {
              Object RESULT = null;
		int defleft = ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-1)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-1)).right;
		Object def = (Object)((java_cup.runtime.Symbol) CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-0)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-0)).value;
		 RESULT = new HashMap();
                                                                            ((HashMap)RESULT).put(def, list); 
              CUP$TemplatingParser$result = new java_cup.runtime.Symbol(1/*definition*/, ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TemplatingParser$stack.elementAt(CUP$TemplatingParser$top-0)).right, RESULT);
            }
          return CUP$TemplatingParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

