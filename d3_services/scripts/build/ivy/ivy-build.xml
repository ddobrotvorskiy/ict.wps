<project xmlns:ivy="antlib:org.apache.ivy.ant">
    <!-- because this file is imported from the basedir ../ we need to specify the properties with the directory -->
    <property file="${ivybuild.dir}/ivy.properties" />

    <!--=======================================================
    STANDARD Targets common in all build-ivy.xml files
    =============================================================/-->

    <!-- create the paths of the libs -->
    <path id="build.path">
        <fileset dir="${lib.dir}" />
    </path>

    <!--Check if the ivy jar is present, if so please don't try to download it all the time"-->
    <available file="${ivy.jar.file}" property="download.ivy" />

    <target name="check-key-file" unless="nightly.keyfile">
        <!-- fake a key file, else the ivysettings will not be valid -->
        <property name="nightly.keyfile" value="${ivy.jar.file}" />
    </target>


    <target name="init" depends="check-key-file">
        <echo message="init: ${module.name}" />
        <mkdir dir="${ivy.jar.dir}" />
        <mkdir dir="${classes.dir}" />
        <mkdir dir="${lib.dir}" />
        <mkdir dir="${repository.dir}" />
        <available property="has.api-src" file="${src-api.dir}/org/deegree/" />
    </target>

    <target name="download-ivy" depends="init" unless="download.ivy">
        <!-- try to load ivy here from home ivy dir, in case the user has not already dropped
                  it into ant's lib dir (note that the latter copy will always take precedence).
                  We will not fail as long as ivy home lib dir exists (it may be empty) and
                  ivy is in at least one of ant's lib dir or the ivy home lib dir.
                  download Ivy from web site so that it can be used even without any special installation
                  -->
        <get src="${ivy.repository.location}" dest="${ivy.jar.file}" usetimestamp="true" />
        <!-- get the ssh dependency -->
        <get src="http://sourceforge.net/projects/jsch/files/jsch/jsch-0.1.42.jar" dest="${ivy.jar.dir}/jsc-0.1.42.jar" usetimestamp="true" />

    </target>

    <target name="load-ivy" depends="download-ivy" unless="ivy.new.revision">
        <tstamp>
            <format property="nightly.date" pattern="yyyyMMdd" />
        </tstamp>
        <path id="ivy.lib.path">
            <fileset dir="${ivy.jar.dir}" includes="*.jar" />
        </path>

        <!-- define the ivy tasks read from the ${user.home}/.ivy/jars/ivy.jar -->
        <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path" />
        <ivy:settings file="${settings.file}" />
    </target>

    <!-- =================================================================== -->
    <!-- prints the environment                                              -->
    <!-- =================================================================== -->

    <target name="env" depends="load-ivy" description="-> prints the environment">
        <echo>Environment:</echo>
        <echo>------------</echo>
        <echo message="java.home = ${java.home}" />
        <echo message="java.version = ${java.version}" />
        <echo message="ant.home = ${ant.home}" />
        <echo message="ant.version = ${ant.version}" />
        <echo message="required ivy version = ${ivy.install.version}" />
        <echo message="build.by = ${build.by}" />
        <echo message="user.home = ${user.home}" />
        <echo message="user.dir = ${user.dir}" />
        <echo message="java.class.path = ${java.class.path}" />
        <echo />
        <echo>Application:</echo>
        <echo>------------</echo>
        <echo message="module name = ${module.name}" />
        <echo message="lib name = deegree-${module.name}" />
        <echo message="application.home = ${basedir}" />
        <echo message="src = ${src.dir}" />
        <echo message="test.src = ${test.src.dir}" />
        <echo message="build = ${build.dir}" />
        <echo message="lib = ${lib.dir}" />
        <echo message="classes = ${classes.dir}" />
    </target>

    <!-- =================================
          target: resolve
         ================================= -->
    <target name="resolve" depends="load-ivy">
        <!--description="-> resolve and retrieve dependencies with ivy"-->
        <ivy:retrieve conf="${module.name}-build" pattern="${lib.dir}/[artifact](-[revision]).[ext]" file="${dependencies.file}" log="${ivy.resolve.verbose}" sync="true" />
        <!--ivy:deliver deliverpattern="${build.dir}/ivy.xml"/-->
        <!-- ivy:resolve file="${dependencies.file}"/-->
    </target>

    <target name="version" depends="resolve" unless="ivy.new.revision">
        <!--asks to ivy an available version number-->
        <ivy:info file="${dependencies.file}" />
        <ivy:buildnumber organisation="${ivy.organisation}" module="${ivy.module}" revision="${module.version.post}" defaultBuildNumber="1" revSep="-" />

        <!-- create moduleinfo file (version) in classpath for later inclusion in jar -->
        <propertyfile file="${classes.dir}/${module.name}_moduleinfo.properties">
            <entry key="build.version" value="${ivy.new.revision}" />
            <entry key="build.date" type="date" value="now" pattern="yyyy/MM/dd HH:mm" />
            <entry key="build.by" value="${user.name}" />
        </propertyfile>

        <!-- load generated moduleinfo file -->
        <property file="${classes.dir}/${module.name}_moduleinfo.properties" />
        <echo message="Building version: ${build.version}" />
    </target>

    <!-- =================================
          target: compile
         ================================= -->
    <target name="compile" depends="version">
        <!-- if any of the dependend jars was updated, delete the previously compiled classes. This way the api-dependency is garanteed.

             For clarification, consider you removed a public method in a dependend d3 module. By calling publish-all you will get these changes in the
             dependee module, but, the java compiler does not recognize that the api has changed (the method is not available anymore) and
             so no java files will be compiled a new.

             While executing this 'broken' configuration, you will get a 'NoSuchMethodException' because your newly created depend jar
             does not contain the method the dependee classes were compiled against.
             -->
        <dependset>
            <srcfileset dir="${lib.dir}" includes="*jar" />
            <targetfileset dir="${classes.dir}" includes="**/*.class" excludes="**/package-info.class" />
        </dependset>
        <!-- for the record: the snipped RIGHT ABOVE does the deleting. What a
        wonder why I did not notice it, with that name... -->
        <!-- touch the package-info.java files to ensure one of the three great 1.7.1 ant conditions apply and they're compiled -->
        <!-- TODO find all places where package-info.class files are deleted and
        delete their parent directories instead, this would solve the problems
        better -->
        <!-- <touch> -->
        <!--   <fileset dir="${src.dir}"> -->
        <!--     <include name="**/package-info.java" /> -->
        <!--   </fileset> -->
        <!-- </touch> -->
        <!--updateProperty needs ant 1.7.1 -->
        <javac updatedProperty="compile.change" destdir="${classes.dir}" classpathref="build.path" fork="true" memorymaximumsize="512M" encoding="utf-8" debug="${debug.enabled}" source="${source.version}" target="${target.version}">
            <src path="${src.dir}" />
            <src path="${src-api.dir}" />
        </javac>
    </target>

    <target name="copy-resources" depends="copy-schemas">
        <!-- Needed for the copying of the resources in the sources dir,
                    if any of the resources is changed, all old resources will be deleted and the compile.change property will be set.
                    todo maybe only copy the updated file, the uptodate task just didn't do the trick (or maybe I'm just too stupid :-) ) -->
        <fileset dir="${classes.dir}" id="classes.resources">
            <exclude name="${module.name}.properties" />
            <exclude name="**/package.html" />
            <exclude name="**/*.class" />
        </fileset>
        <fileset dir="${src.dir}" id="sources.resources">
            <exclude name="**/package.html" />
            <exclude name="**/*.java" />
        </fileset>
        <dependset>
            <srcfileset refid="sources.resources" />
            <targetfileset refid="classes.resources" />
        </dependset>

        <condition property="compile.change">
            <resourcecount refid="classes.resources" count="0" when="eq" />
        </condition>

        <copy todir="${classes.dir}">
            <fileset refid="sources.resources" />
        </copy>
    </target>

    <target name="copy-schemas">
        <copy todir="${classes.dir}/META-INF/schemas/" failonerror="false">
            <fileset dir="${resources}/schema/">
                <include name="**/*.xsd" />
            </fileset>
        </copy>
        <copy todir="${classes.dir}/META-INF/schemas/" failonerror="false">
            <fileset dir="${core.location}/resources/schema/">
                <include name="**/*.xsd" />
            </fileset>
        </copy>
        <replace dir="${classes.dir}/META-INF/schemas/" includes="**/*.xsd" encoding="UTF-8" token="../../../../../d3_core/resources/schema/" value="../../" />
    </target>

    <target name="compile-and-copy" depends="compile, copy-resources" />
    <!-- =================================
          target: build-jar
         ================================= -->
    <target name="build-jar" depends="compile-and-copy" if="compile.change" description="-> create a jar file in ${classed.dir}/${jar.file}.jar">
        <pathconvert property="lib-path" pathsep=" " refid="build.path">
            <map from="${build.dir}/" to="" />
        </pathconvert>
        <jar destfile="${jar.file}.jar">
            <fileset dir="${classes.dir}" />
            <manifest>
                <attribute name="Built-By" value="${build.by}" />
                <attribute name="Build-Version" value="${build.version}" />
                <attribute name="Class-Path" value="${lib-path}" />
            </manifest>
        </jar>
    </target>

    <!-- =================================
          target: zip-sources packs all java sources in a zip file.
         ================================= -->

    <target name="zip-sources-api" if="has.api-src">
        <zip destfile="${src.file}.zip" update="true">
            <zipfileset dir="${src-api.dir}" prefix="${src-api.dir}">
                <include name="**/*.java" />
                <include name="**/*.properties" />
            </zipfileset>
        </zip>
    </target>

    <target name="zip-sources" depends="load-ivy, zip-sources-api" description="-> zip all *java files in the ${src.dir}">
        <zip destfile="${src.file}.zip" update="true">
            <zipfileset dir="${src.dir}" prefix="${src.dir}">
                <include name="**/*.java" />
                <include name="**/*.properties" />
            </zipfileset>
        </zip>
    </target>

    <!-- ====================================
         Generate a nice report of dependencies
         ==================================== -->
    <target name="report" depends="resolve">
        <!--description="-> generates a report of dependencies"-->
        <ivy:report todir="${report.dir}" conf="${module.name}-build" dot="true" />
    </target>

    <!-- =================================================================== -->
    <!-- creates API JavaDoc                                                  -->
    <!-- =================================================================== -->

    <target name="javadoc-headers">
        <property name="doc.header" value="${jar.name}-${module.version.post} (${build.date}) - ${build.by}" />
        <property name="doc.footer" value="${doc.header}" />
    </target>

    <target name="javadoc-src-api" depends="javadoc-headers" if="has.api-src">
        <javadoc source="${source.version}" packagenames="org.deegree.*" destdir="${javadoc.dir}" overview="${src.dir}/overview.html" author="true" version="true" verbose="${debug}" use="true" package="true" windowtitle="${doc.window}" maxmemory="512m" encoding="utf-8" failonerror="0">
            <doctitle>${doc.title}</doctitle>
            <header>${doc.header}</header>
            <footer>${doc.footer}</footer>
            <bottom>${doc.bottom}</bottom>

            <link href="${doc.sun.link}" />
            <packageset dir="${src.dir}" />
            <packageset dir="${src-api.dir}" />
            <classpath>
                <path refid="build.path" />
            </classpath>
        </javadoc>
    </target>

    <target name="javadoc" depends="compile,javadoc-src-api" unless="has.api-src" description="-> creates API JavaDoc">
        <javadoc source="${source.version}" packagenames="org.deegree.*" overview="${src.dir}/overview.html" destdir="${javadoc.dir}" author="true" version="true" verbose="${debug}" use="true" package="true" windowtitle="${doc.window}" maxmemory="512m" encoding="utf-8">
            <doctitle>${doc.title}</doctitle>
            <header>${doc.header}</header>
            <footer>${doc.footer}</footer>
            <bottom>${doc.bottom}</bottom>

            <link href="${doc.sun.link}" />
            <packageset dir="${src.dir}" />
            <classpath>
                <path refid="build.path" />
            </classpath>
        </javadoc>
    </target>

    <target name="zip-javadoc" depends="javadoc">
        <zip destfile="${javadoc.file}.zip" update="true">
            <zipfileset dir="${javadoc.dir}">
                <include name="**" />
            </zipfileset>
        </zip>
    </target>



    <!-- =================================
          publish targets, publishing means: make the current 'revision' available for all other modules by putting them in a (local) repository.
         ================================= -->

    <target name="publish-local">
        <!--description="-> publish all configurations of ${module.name} in the local-ivy (${ivy.home.dir}/local/${module.organisation}/${module.name}) repository"-->
        <ant target="local-publish" />
    </target>

    <target name="local-publish" depends="build-jar" if="compile.change">
        <ivy:publish conf="${module.name}-build" artifactspattern="${build.dir}/[artifact].[ext]" resolver="local-publisher" pubrevision="${build.version}" status="integration" forcedeliver="true" overwrite="true" />
        <echo message="project ${module.name}-build released with version ${build.version}" />
    </target>

    <target name="publish-nightly">
        <!--description="-> publish ${module.name}-build in the nightly ivy repository"-->
        <!-- define the resolver for a local build -->
        <ant target="nightly-publish" />
    </target>

    <target name="nightly-publish" depends="build-jar,zip-javadoc,zip-sources" if="compile.change">
        <!--create a local build as well, it is needed for the other dependent libs -->
        <ivy:publish conf="${module.name}-build" artifactspattern="${build.dir}/[artifact].[ext]" resolver="local-publisher" pubrevision="${build.version}" status="integration" forcedeliver="true" overwrite="true" />

        <!-- put the result on the deployment server -->
        <ivy:publish conf="${module.name}-build" artifactspattern="${build.dir}/[artifact].[ext]" resolver="nightly-publisher" pubrevision="${build.version}" status="integration" forcedeliver="true" overwrite="true" />
        <ivy:publish conf="${module.name}-javadoc" artifactspattern="${build.dir}/[artifact].[ext]" resolver="nightly-publisher" pubrevision="${build.version}" status="integration" forcedeliver="true" overwrite="true" />
        <ivy:publish conf="${module.name}-src" artifactspattern="${build.dir}/[artifact].[ext]" resolver="nightly-publisher" pubrevision="${build.version}" status="integration" forcedeliver="true" overwrite="true" />
        <ivy:report todir="${build.dir}" outputpattern="${report.name}.[ext]" conf="${module.name}-build" xsl="true" xml="false" dot="false" graph="false" />
        <ivy:publish conf="${module.name}-report" artifactspattern="${build.dir}/[artifact].[ext]" resolver="nightly-publisher" pubrevision="${build.version}" status="integration" forcedeliver="true" overwrite="true" />
    </target>

    <!-- ==================================
          target: clean
     ================================= -->
    <target name="clean" description="-> cleans this projects created directory">
        <echo message="clean: ${module.name}" />
        <delete dir="${build.dir}" failonerror="false" />
    </target>

    <target name="clean-local-repository" depends="clean">
        <!--description="-> cleans this projects created build directory, the ivy cache and the .ivy/local/org.deegree/[module]"-->
        <delete dir="${repository.dir}/${module.organisation}/${module.name}" failonerror="false" />
    </target>

    <target name="clean-cache" depends="clean-local-repository">
        <!--description="-> cleans this projects created build directory, the ivy cache and the .ivy/local/org.deegree/[module]"-->
        <delete dir="${ivy.home.dir}/cache" failonerror="false" />
    </target>

</project>
