//$HeadURL$
/*----------------------------------------------------------------------------
 This file is part of deegree, http://deegree.org/
 Copyright (C) 2001-2009 by:
 Department of Geography, University of Bonn
 and
 lat/lon GmbH

 This library is free software; you can redistribute it and/or modify it under
 the terms of the GNU Lesser General Public License as published by the Free
 Software Foundation; either version 2.1 of the License, or (at your option)
 any later version.
 This library is distributed in the hope that it will be useful, but WITHOUT
 ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 details.
 You should have received a copy of the GNU Lesser General Public License
 along with this library; if not, write to the Free Software Foundation, Inc.,
 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

 Contact information:

 lat/lon GmbH
 Aennchenstr. 19, 53177 Bonn
 Germany
 http://lat-lon.de/

 Department of Geography, University of Bonn
 Prof. Dr. Klaus Greve
 Postfach 1147, 53001 Bonn
 Germany
 http://www.geographie.uni-bonn.de/deegree/

 e-mail: info@deegree.org
 ----------------------------------------------------------------------------*/

package org.deegree.services.wpvs.config;

import static org.deegree.commons.utils.math.MathUtils.EPSILON;
import static org.deegree.services.wpvs.PerspectiveViewService.createEnvelope;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.deegree.commons.configuration.BoundingBoxType;
import org.deegree.commons.configuration.ScaleDenominatorsType;
import org.deegree.commons.xml.XMLAdapter;
import org.deegree.crs.CRS;
import org.deegree.geometry.Envelope;
import org.deegree.rendering.r3d.ViewParams;
import org.deegree.services.wpvs.configuration.AbstractDataType;

/**
 * The <code>DatasetWrapper</code> class defines methods for the retrieval the objects which match requested datasets
 * names and a {@link ViewParams}.
 * 
 * @author <a href="mailto:bezema@lat-lon.de">Rutger Bezema</a>
 * @author last edited by: $Author$
 * @version $Revision$, $Date$
 * @param <CO>
 *            the constraint object.
 * 
 */
public class DatasetWrapper<CO> {
    private final static org.slf4j.Logger LOG = org.slf4j.LoggerFactory.getLogger( DatasetWrapper.class );

    private final CRS defaultCRS;

    private final double[] translationToLocalCRS;

    Map<String, List<Constraint<CO>>> datasourceConstraints = new HashMap<String, List<Constraint<CO>>>();

    private final XMLAdapter configAdapter;

    /**
     * @param defaultCRS
     * @param translationToLocalCRS
     * @param configAdapter
     */
    public DatasetWrapper( CRS defaultCRS, double[] translationToLocalCRS, XMLAdapter configAdapter ) {
        this.defaultCRS = defaultCRS;
        this.translationToLocalCRS = translationToLocalCRS;
        this.configAdapter = configAdapter;
    }

    /**
     * return the {@link ScaleDenominatorsType} if the definedScale does is null, the parent scale will be used.
     * 
     * @param parentScale
     * @param definedScale
     * @return the {@link ScaleDenominatorsType} of the given datatype.
     */
    private ScaleDenominatorsType clarifyScaleInheritance( ScaleDenominatorsType parentScale,
                                                           ScaleDenominatorsType definedScale ) {
        ScaleDenominatorsType result = definedScale;
        if ( result == null ) {
            result = parentScale;
        } else {
            if ( result.getMin() < parentScale.getMin() ) {
                LOG.info( "The minimal scale denominator is smaller than the parent scaledenominator, is this correct?" );
            }
            if ( result.getMax() > parentScale.getMax() ) {
                LOG.info( "The maximum scale denominator exceeds its parent scaledenominator, is this correct?" );
            }
        }
        return result;
    }

    /**
     * Return the datatype {@link BoundingBoxType} if the given datatype does not have one, set the parent
     * {@link BoundingBoxType} to it.
     * 
     * @param parentBBox
     * @param definedBBox
     * @return the datatype bbox.
     */
    private BoundingBoxType clarifyBBoxInheritance( BoundingBoxType parentBBox, BoundingBoxType definedBBox ) {
        BoundingBoxType result = definedBBox;
        if ( result == null ) {
            result = parentBBox;
        } else {
            if ( !isWithin( result, parentBBox ) ) {
                LOG.info( "The parent bbox is not located within it's parents bbox, is this correct?" );
            }
        }
        return result;
    }

    /**
     * @param parentMaxPixelError
     * @param maxPixelError
     * @return
     */
    private Double clarifyMaxPixelError( Double parentMaxPixelError, Double maxPixelError ) {
        return ( maxPixelError == null ) ? parentMaxPixelError : maxPixelError;
    }

    /**
     * @param datatype
     * @param parentBBox
     * @param parentScale
     * @param parentMaxPixelError
     */
    protected void clarifyInheritance( AbstractDataType datatype, BoundingBoxType parentBBox,
                                       ScaleDenominatorsType parentScale, Double parentMaxPixelError ) {

        datatype.setBoundingBox( clarifyBBoxInheritance( parentBBox, datatype.getBoundingBox() ) );
        datatype.setScaleDenominators( clarifyScaleInheritance( parentScale, datatype.getScaleDenominators() ) );
        datatype.setMaxPixelError( clarifyMaxPixelError( parentMaxPixelError, datatype.getMaxPixelError() ) );
    }

    /**
     * 
     * @param firstBBox
     * @param secondBBox
     * @return true if the first is within the second bbox
     */
    private boolean isWithin( BoundingBoxType firstBBox, BoundingBoxType secondBBox ) {
        boolean result = ( firstBBox.getLowerCorner().size() == secondBBox.getLowerCorner().size() );
        if ( result ) {
            List<Double> aLow = firstBBox.getLowerCorner();
            List<Double> aUp = firstBBox.getUpperCorner();
            List<Double> bLow = secondBBox.getLowerCorner();
            List<Double> bUp = secondBBox.getUpperCorner();
            for ( int i = 0; i < aLow.size() && result; ++i ) {
                result = ( aLow.get( i ) >= bLow.get( i ) ) && ( aUp.get( i ) <= bUp.get( i ) );
            }
        }
        return result;
    }

    /**
     * This method returns true if the second scale interval intersects with the first scale interval.
     * 
     * 
     * @param firstScales
     * @param secondScales
     * @return true if the second scale interval intersects the first interval.
     */
    protected boolean scalesFit( ScaleDenominatorsType firstScales, ScaleDenominatorsType secondScales ) {
        boolean result = ( firstScales == null ) && ( secondScales == null );
        if ( !result ) {
            if ( firstScales != null && secondScales != null ) {
                result = ( secondScales.getMin() <= firstScales.getMax() )
                         && ( firstScales.getMin() <= secondScales.getMax() );
            }
        }
        return result;
    }

    /**
     * @param name
     *            of dataset
     * @return true if the no datasets were previously defined with the given name.
     */
    protected boolean isUnAmbiguous( String name ) {
        return datasourceConstraints.containsKey( name );
    }

    /**
     * @return the number of configured datasets.
     */
    public int size() {
        return datasourceConstraints.size();
    }

    /**
     * Add a constrained to the given name of a dataset.
     * 
     * @param name
     * @param datasourceObject
     * @param bbt
     * @param sdt
     * @return true if no previous mapping for the given name was found.
     */
    protected boolean addConstraint( String name, CO datasourceObject, BoundingBoxType bbt, ScaleDenominatorsType sdt ) {
        List<Constraint<CO>> dsConstraints = datasourceConstraints.get( name );
        Constraint<CO> newC = new Constraint<CO>( datasourceObject, createEnvelope( bbt, defaultCRS, null ),
                                                  sdt.getMin(), sdt.getMax() );
        if ( newC.getValidEnvelope().getMin().getCoordinateDimension() != 3 ) {
            LOG.warn( "Given envelope of datasource: " + name
                      + " is not 3 dimensional, please configure this datasource to be 3d." );
        }
        if ( dsConstraints == null ) {
            dsConstraints = new LinkedList<Constraint<CO>>();
            dsConstraints.add( newC );
            datasourceConstraints.put( name, dsConstraints );
            return true;
        }
        for ( Constraint<CO> c : dsConstraints ) {
            if ( c.equals( newC ) ) {
                LOG.info( "Ignoring datasource it is already defined. " );
                return false;
            }
            if ( c.minScale < newC.minScale && c.maxScale > newC.maxScale ) {
                if ( c.validEnvelope.intersects( newC.validEnvelope ) ) {
                    LOG.warn( "Found overlapping scales and envelopes for datasource, this may not be." );
                    return false;
                }
            }

        }
        dsConstraints.add( newC );
        return true;
    }

    /**
     * Iterates over all configured datasets and add them to the list
     * 
     * @return the list of matching objects, never <code>null</code>
     */
    public List<CO> getAllDatasourceObjects() {
        List<CO> result = new LinkedList<CO>();
        if ( datasourceConstraints != null && !datasourceConstraints.isEmpty() ) {
            for ( List<Constraint<CO>> objects : datasourceConstraints.values() ) {
                if ( objects != null && !objects.isEmpty() ) {
                    for ( Constraint<CO> constraint : objects ) {
                        result.add( constraint.getDatasourceObject() );

                    }
                }

            }
        }
        return result;
    }

    /**
     * Matches the given names to the configured datasets and tests retrieves the datasources/datasets which match the
     * names and the viewparams.
     * 
     * @param requestedDatasets
     * @param viewParams
     * @return the list of matching objects, never <code>null</code>
     */
    public List<CO> getMatchingDatasourceObjects( Collection<String> requestedDatasets, ViewParams viewParams ) {
        List<CO> result = new LinkedList<CO>();
        if ( requestedDatasets != null && !requestedDatasets.isEmpty() ) {
            for ( String ds : requestedDatasets ) {
                if ( ds != null ) {
                    if ( datasourceConstraints.containsKey( ds ) ) {
                        List<Constraint<CO>> dsConst = datasourceConstraints.get( ds );
                        if ( dsConst != null && !dsConst.isEmpty() ) {
                            for ( Constraint<CO> constraint : dsConst ) {
                                if ( constraint.matches( viewParams ) ) {
                                    result.add( constraint.getDatasourceObject() );
                                }
                            }
                        }

                    }
                }

            }
        }
        return result;
    }

    /**
     * @return all configured and requestable names known to to this dataset type.
     */
    public Set<String> datasetNames() {
        return this.datasourceConstraints.keySet();
    }

    /**
     * Resolve the given url to the config xml file.
     * 
     * @param url
     * @return the URL resolved to the configuration xml file.
     */
    protected URL resolve( String url ) {
        URL result = null;
        try {
            result = this.configAdapter.resolve( url );
        } catch ( MalformedURLException e ) {
            LOG.error( "Could not resolve url: " + url + " because: " + e.getLocalizedMessage(), e );
        }
        return result;
    }

    /**
     * @return the translationToLocalCRS
     */
    public double[] getTranslationToLocalCRS() {
        return translationToLocalCRS;
    }

    private class Constraint<CO> {

        private final CO datasourceObject;

        Envelope validEnvelope;

        double maxScale;

        double minScale;

        /**
         * @param datasource
         * @param createEnvelope
         * @param min
         * @param max
         */
        Constraint( CO datasource, Envelope createEnvelope, double min, double max ) {
            this.datasourceObject = datasource;
            validEnvelope = createEnvelope;

            minScale = min;
            maxScale = max;
        }

        /**
         * @return the object which is defined by this constraint.
         */
        public CO getDatasourceObject() {
            return datasourceObject;
        }

        /**
         * @param viewParams
         * @param boundingBox
         * @return true if the given this constraints match the given values.
         */
        boolean matches( ViewParams viewParams ) {
            if ( viewParams == null ) {
                return true;
            }
            boolean result = true;
            if ( validEnvelope.getCoordinateDimension() == 3 ) {

                double[][] bbox = new double[][] { validEnvelope.getMin().getAsArray(),
                                                  validEnvelope.getMax().getAsArray() };
                result = viewParams.getViewFrustum().intersects( bbox );
                // if ( result ) {
                // Point3d ep = viewParams.getViewFrustum().getEyePos();
                // double[] eye = new double[] { ep.x, ep.y, ep.z };
                // double distance = VectorUtils.getDistance( bbox, eye );
                // double pixelSize = viewParams.estimatePixelSizeForSpaceUnit( distance );
                // double estimateSize = pixelSize * SQRT2;
                // result = ( minScale <= estimateSize && maxScale > estimateSize );
                // }
            }
            return result;
        }

        /**
         * @return the validEnvelope
         */
        public final Envelope getValidEnvelope() {
            return validEnvelope;
        }

        /**
         * @return the maxScale
         */
        public final double getMaxScale() {
            return maxScale;
        }

        /**
         * @return the minScale
         */
        public final double getMinScale() {
            return minScale;
        }

        @SuppressWarnings("unchecked")
        @Override
        public boolean equals( Object other ) {
            if ( other != null && other instanceof Constraint ) {
                final Constraint<CO> that = (Constraint<CO>) other;
                return Math.abs( this.minScale - that.minScale ) < EPSILON
                       && Math.abs( this.maxScale - that.maxScale ) < EPSILON
                       && this.validEnvelope.equals( that.validEnvelope );
            }
            return false;
        }
    }

    /**
     * @return the defaultCRS
     */
    protected final CRS getDefaultCRS() {
        return defaultCRS;
    }

}
