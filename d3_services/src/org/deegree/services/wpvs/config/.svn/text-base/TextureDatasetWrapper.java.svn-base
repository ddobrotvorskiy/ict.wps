//$HeadURL$
/*----------------------------------------------------------------------------
 This file is part of deegree, http://deegree.org/
 Copyright (C) 2001-2009 by:
 Department of Geography, University of Bonn
 and
 lat/lon GmbH

 This library is free software; you can redistribute it and/or modify it under
 the terms of the GNU Lesser General Public License as published by the Free
 Software Foundation; either version 2.1 of the License, or (at your option)
 any later version.
 This library is distributed in the hope that it will be useful, but WITHOUT
 ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 details.
 You should have received a copy of the GNU Lesser General Public License
 along with this library; if not, write to the Free Software Foundation, Inc.,
 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

 Contact information:

 lat/lon GmbH
 Aennchenstr. 19, 53177 Bonn
 Germany
 http://lat-lon.de/

 Department of Geography, University of Bonn
 Prof. Dr. Klaus Greve
 Postfach 1147, 53001 Bonn
 Germany
 http://www.geographie.uni-bonn.de/deegree/

 e-mail: info@deegree.org
 ----------------------------------------------------------------------------*/

package org.deegree.services.wpvs.config;

import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

import org.deegree.commons.configuration.BoundingBoxType;
import org.deegree.commons.configuration.ScaleDenominatorsType;
import org.deegree.commons.datasource.configuration.AbstractGeospatialDataSourceType;
import org.deegree.commons.datasource.configuration.MultiResolutionDataSource;
import org.deegree.commons.datasource.configuration.RasterDataSource;
import org.deegree.commons.datasource.configuration.RasterFileSetType;
import org.deegree.commons.datasource.configuration.WMSDataSourceType;
import org.deegree.commons.datasource.configuration.MultiResolutionDataSource.Resolution;
import org.deegree.commons.utils.nio.DirectByteBufferPool;
import org.deegree.commons.xml.XMLAdapter;
import org.deegree.crs.CRS;
import org.deegree.rendering.r3d.opengl.rendering.dem.manager.TextureManager;
import org.deegree.rendering.r3d.opengl.rendering.dem.manager.TextureTileManager;
import org.deegree.rendering.r3d.opengl.rendering.dem.texturing.RasterAPITextureTileProvider;
import org.deegree.rendering.r3d.opengl.rendering.dem.texturing.TextureTileProvider;
import org.deegree.rendering.r3d.opengl.rendering.dem.texturing.WMSTextureTileProvider;
import org.deegree.services.wpvs.configuration.DEMTextureDataset;
import org.deegree.services.wpvs.configuration.DatasetDefinitions;

/**
 * The <code>TextureDatasetWrapper</code> class TODO add class documentation here.
 * 
 * @author <a href="mailto:bezema@lat-lon.de">Rutger Bezema</a>
 * @author last edited by: $Author$
 * @version $Revision$, $Date$
 * 
 */
public class TextureDatasetWrapper extends DatasetWrapper<TextureManager> {

    private final static org.slf4j.Logger LOG = org.slf4j.LoggerFactory.getLogger( TextureDatasetWrapper.class );

    private final int maxTexturesInMemory;

    private final int maxCachedTextureTiles;

    private final DirectByteBufferPool textureByteBufferPool;

    private final int maxTexturesInGPU;

    /**
     * @param defaultCRS
     * @param translationToLocalCRS
     * @param configAdapter
     *            to resolve any file urls against
     * @param dsd
     *            to get the {@link DEMTextureDataset} from.
     * @param textureByteBufferPool
     * @param maxTexturesInMemory
     *            the number of textures in cache
     * @param maxCachedTextureTiles
     *            the number of texture tiles in cache.
     * @param maxTexturesInGPU
     *            the number of texture in the gpu space.
     */
    public TextureDatasetWrapper( CRS defaultCRS, double[] translationToLocalCRS, XMLAdapter configAdapter,
                                  DatasetDefinitions dsd, DirectByteBufferPool textureByteBufferPool,
                                  int maxTexturesInMemory, int maxCachedTextureTiles, int maxTexturesInGPU ) {
        super( defaultCRS, translationToLocalCRS, configAdapter );
        this.textureByteBufferPool = textureByteBufferPool;
        this.maxTexturesInMemory = maxTexturesInMemory;
        this.maxCachedTextureTiles = maxCachedTextureTiles;
        this.maxTexturesInGPU = maxTexturesInGPU;
        fillTexturesFromDatasetDefinitions( dsd );
    }

    /**
     * Analyzes the {@link DEMTextureDataset} from the {@link DatasetDefinitions}, fills the renderers with data from
     * the defined modelbackends and builds up a the constraint vectors for retrieval of the appropriate renderers.
     * 
     * @param dsd
     */
    private void fillTexturesFromDatasetDefinitions( DatasetDefinitions dsd ) {
        List<DEMTextureDataset> demTextureDatsets = dsd.getDEMTextureDataset();
        if ( !demTextureDatsets.isEmpty() ) {
            analyseAndExtractConstraints( demTextureDatsets, dsd.getBoundingBox(), dsd.getScaleDenominators(),
                                          dsd.getMaxPixelError() );
        } else {
            LOG.info( "No model dataset has been configured, no buildings, trees and prototypes will be available." );
        }
    }

    private void analyseAndExtractConstraints( List<DEMTextureDataset> textureDatasets, BoundingBoxType parentBBox,
                                               ScaleDenominatorsType parentScale, Double parentMaxPixelError ) {
        if ( textureDatasets != null && !textureDatasets.isEmpty() ) {
            for ( DEMTextureDataset dts : textureDatasets ) {
                if ( dts != null ) {
                    if ( isUnAmbiguous( dts.getName() ) ) {
                        LOG.info( "The feature dataset with name: " + dts.getName() + " and title: " + dts.getTitle()
                                  + " had multiple definitions in your service configuration." );
                    } else {
                        clarifyInheritance( dts, parentBBox, parentScale, parentMaxPixelError );
                        try {
                            handleTextureDataset( dts );
                        } catch ( IOException e ) {
                            LOG.error( "Failed to initialize configured demTexture dataset: " + dts.getName() + ": "
                                       + dts.getTitle() + " because: " + e.getLocalizedMessage(), e );
                        }
                    }
                }
            }
        }
    }

    /**
     * @param mds
     * @throws IOException
     */
    private void handleTextureDataset( DEMTextureDataset textureDataset )
                            throws IOException {

        MultiResolutionDataSource mrds = textureDataset.getMultiResolutionDataSource();
        List<TextureTileProvider> tileProviders = new ArrayList<TextureTileProvider>();
        LOG.info( "Texture dataset: " + textureDataset.getName() );
        for ( Resolution res : mrds.getResolution() ) {
            AbstractGeospatialDataSourceType ds = res.getAbstractGeospatialDataSource().getValue();
            if ( ds instanceof RasterDataSource ) {
                RasterDataSource levelSource = (RasterDataSource) ds;
                RasterFileSetType rfst = levelSource.getRasterDirectory();
                if ( rfst != null ) {
                    URL resolvedURL = resolve( rfst.getValue() );
                    tileProviders.add( new RasterAPITextureTileProvider( new File( resolvedURL.getFile() ),
                                                                         res.getRes() ) );
                }
            } else if ( ds instanceof WMSDataSourceType ) {
                WMSDataSourceType levelSource = (WMSDataSourceType) ds;
                URL capabilitiesURL = new URL( levelSource.getCapabilitiesDocumentLocation().getLocation() );
                int maxWidth = -1;
                int maxHeight = -1;
                if ( levelSource.getMaxMapDimensions() != null ) {
                    maxWidth = levelSource.getMaxMapDimensions().getWidth().intValue();
                    maxHeight = levelSource.getMaxMapDimensions().getWidth().intValue();
                }
                int requestTimeout = -1;
                if ( levelSource.getRequestTimeout() != null ) {
                    requestTimeout = levelSource.getRequestTimeout().intValue();
                }
                String requestFormat = "image/png";
                boolean transparent = false;
                if ( levelSource.getRequestedFormat() != null ) {
                    requestFormat = levelSource.getRequestedFormat().getValue();
                    transparent = levelSource.getRequestedFormat().isTransparent();
                }
                String[] layers = new String[] { levelSource.getRequestedLayers() };
                // TODO how to handle differing CRS
                // TODO remove hard code crs reference (But note: 'EPSG' must be in uppercase, which differs from
                // getDefaultCRS())
                CRS crs = new CRS( "EPSG:31466" );
                WMSTextureTileProvider wmsTextureTileProvider = null;
                try {
                    wmsTextureTileProvider = new WMSTextureTileProvider( capabilitiesURL, layers, crs, requestFormat,
                                                                         transparent, res.getRes(), maxWidth,
                                                                         maxHeight, requestTimeout );
                } catch ( Exception e ) {
                    LOG.warn( "Could not create wms dataset from " + capabilitiesURL + " because: " + e );
                }
                if ( wmsTextureTileProvider != null ) {
                    tileProviders.add( wmsTextureTileProvider );
                }
            } else {
                LOG.warn( "Unhandled datasource type: " + ds.getClass().getName() );
            }
        }
        if ( !tileProviders.isEmpty() ) {
            TextureTileManager tileManager = new TextureTileManager(
                                                                     tileProviders.toArray( new TextureTileProvider[tileProviders.size()] ),
                                                                     maxCachedTextureTiles );

            TextureManager result = new TextureManager( this.textureByteBufferPool, tileManager,
                                                        getTranslationToLocalCRS(), maxTexturesInMemory,
                                                        maxTexturesInGPU );

            addConstraint( textureDataset.getName(), result, textureDataset.getBoundingBox(),
                           textureDataset.getScaleDenominators() );
        } else {
            LOG.warn( "Ignoring texture dataset: " + textureDataset.getName() + ": " + textureDataset.getTitle()
                      + " because no texture providers could be initialized." );
        }
    }

}
