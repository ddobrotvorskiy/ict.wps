//$HeadURL$
/*----------------------------------------------------------------------------
 This file is part of deegree, http://deegree.org/
 Copyright (C) 2001-2009 by:
 Department of Geography, University of Bonn
 and
 lat/lon GmbH

 This library is free software; you can redistribute it and/or modify it under
 the terms of the GNU Lesser General Public License as published by the Free
 Software Foundation; either version 2.1 of the License, or (at your option)
 any later version.
 This library is distributed in the hope that it will be useful, but WITHOUT
 ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 details.
 You should have received a copy of the GNU Lesser General Public License
 along with this library; if not, write to the Free Software Foundation, Inc.,
 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

 Contact information:

 lat/lon GmbH
 Aennchenstr. 19, 53177 Bonn
 Germany
 http://lat-lon.de/

 Department of Geography, University of Bonn
 Prof. Dr. Klaus Greve
 Postfach 1147, 53001 Bonn
 Germany
 http://www.geographie.uni-bonn.de/deegree/

 e-mail: info@deegree.org
 ----------------------------------------------------------------------------*/

package org.deegree.services.wpvs;

import java.awt.image.BufferedImage;
import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import javax.media.opengl.GLPbuffer;

import org.deegree.commons.configuration.BoundingBoxType;
import org.deegree.commons.utils.nio.DirectByteBufferPool;
import org.deegree.commons.utils.nio.PooledByteBuffer;
import org.deegree.commons.xml.XMLAdapter;
import org.deegree.crs.CRS;
import org.deegree.geometry.Envelope;
import org.deegree.geometry.GeometryFactory;
import org.deegree.rendering.r3d.ViewParams;
import org.deegree.rendering.r3d.opengl.rendering.RenderContext;
import org.deegree.rendering.r3d.opengl.rendering.dem.manager.TerrainRenderingManager;
import org.deegree.rendering.r3d.opengl.rendering.dem.manager.TextureManager;
import org.deegree.rendering.r3d.opengl.rendering.model.manager.BuildingRenderer;
import org.deegree.rendering.r3d.opengl.rendering.model.manager.TreeRenderer;
import org.deegree.rendering.r3d.opengl.rendering.model.texture.TexturePool;
import org.deegree.services.controller.exception.ControllerException;
import org.deegree.services.controller.ows.OWSException;
import org.deegree.services.controller.wpvs.getview.GetView;
import org.deegree.services.exception.ServiceInitException;
import org.deegree.services.wpvs.config.BuildingsDatasetWrapper;
import org.deegree.services.wpvs.config.DemDatasetWrapper;
import org.deegree.services.wpvs.config.TextureDatasetWrapper;
import org.deegree.services.wpvs.config.TreesDatasetWrapper;
import org.deegree.services.wpvs.configuration.Copyright;
import org.deegree.services.wpvs.configuration.DatasetDefinitions;
import org.deegree.services.wpvs.configuration.ServiceConfiguration;
import org.deegree.services.wpvs.configuration.SkyImages;
import org.deegree.services.wpvs.configuration.TranslationToLocalCRS;
import org.deegree.services.wpvs.configuration.Copyright.Image;
import org.deegree.services.wpvs.configuration.SkyImages.SkyImage;
import org.deegree.services.wpvs.rendering.jogl.ConfiguredOpenGLInitValues;
import org.deegree.services.wpvs.rendering.jogl.GLPBufferPool;
import org.deegree.services.wpvs.rendering.jogl.GetViewRenderer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * The <code>PerspectiveViewService</code> class startsup the perspective view
 * 
 * @author <a href="mailto:bezema@lat-lon.de">Rutger Bezema</a>
 * 
 * @author last edited by: $Author$
 * 
 * @version $Revision$, $Date$
 * 
 */
public class PerspectiveViewService {

    private final static Logger LOG = LoggerFactory.getLogger( PerspectiveViewService.class );

    private final static GeometryFactory geomFactory = new GeometryFactory();

    private final ServiceConfiguration serviceConfiguration;

    private DirectByteBufferPool textureByteBufferPool;

    private BuildingsDatasetWrapper buildingDatasets;

    private TreesDatasetWrapper treesDatasets;

    private TextureDatasetWrapper textureDatasets;

    private DemDatasetWrapper demDatasets;

    private double[] translationToLocalCRS;

    private CRS defaultCRS;

    private GLPbuffer offscreenBuffer;

    private TerrainRenderingManager defaultDEMRenderer;

    private String copyrightKey;

    private double copyrighScale;

    private DirectByteBufferPool resultImagePool;

    private final int resultImageSize;

    private final int maxRequestWidth;

    private final int maxRequestHeight;

    private final int maxTextureSize;

    private final GLPBufferPool pBufferPool;

    private ConfiguredOpenGLInitValues configuredOpenGLInitValues;

    private final double nearClippingPlane;

    private final double farClippingPlane;

    /**
     * @param configAdapter
     *            needed for the resolving of any relative urls in the configuration documents.
     * @param sc
     *            the service configuration created with jaxb.
     * @throws ServiceInitException
     */
    public PerspectiveViewService( XMLAdapter configAdapter, ServiceConfiguration sc ) throws ServiceInitException {
        DatasetDefinitions dsd = sc.getDatasetDefinitions();
        serviceConfiguration = sc;
        this.nearClippingPlane = ( sc.getNearClippingPlane() == null ) ? 0.1 : sc.getNearClippingPlane();
        this.farClippingPlane = ( sc.getMaxRequestFarClippingPlane() == null ) ? 100000
                                                                              : sc.getMaxRequestFarClippingPlane();
        pBufferPool = new GLPBufferPool( 1, serviceConfiguration.getMaxViewWidth(),
                                         serviceConfiguration.getMaxViewHeight() );
        this.maxRequestWidth = pBufferPool.getMaxWidth();
        this.maxRequestHeight = pBufferPool.getMaxHeight();
        this.maxTextureSize = pBufferPool.getMaxTextureSize();
        this.resultImageSize = maxRequestHeight * maxRequestWidth * 3;
        resultImagePool = new DirectByteBufferPool( resultImageSize * StaticConfiguration.numberOfResultImageBuffers,
                                                    StaticConfiguration.numberOfResultImageBuffers );

        if ( dsd != null ) {
            initValuesFromDatasetDefintions( dsd );
            initDatasets( configAdapter, dsd );
            initBackgroundImages( configAdapter );
            initCopyright( configAdapter );
            initGL();
        } else {
            throw new ServiceInitException( "Datasetdefinitions must be provided." );
        }

    }

    // http://localhost:8080/services/services?service=WPVS&request=GetView&version=0.4.0&crs=epsg:31466&ELEVATIONMODEL=Elevation&OUTPUTFORMAT=image%2Fjpeg&EXCEPTIONS=application/vnd.ogc.se_xml&ROLL=0&SPLITTER=QUAD&Boundingbox=2579816.5%2C5616304.5%2C2582519.5%2C5619007.5&DATETIME=2006-06-21T12:30:00&YAW=73&PITCH=5&DISTANCE=442&AOV=60&SCALE=1.0&BACKGROUND=cirrus&WIDTH=800&HEIGHT=600&BACKGROUNDCOLOR=0xc6d6e5&datasets=buildings,trees,aerophoto-2007&POI=2589778,5621865,166

    /**
     * @param configAdapter
     */
    private void initCopyright( XMLAdapter configAdapter ) {
        if ( serviceConfiguration.getCopyright() != null ) {
            Copyright copy = serviceConfiguration.getCopyright();
            Image image = copy.getImage();
            if ( image != null ) {
                String url = image.getUrl();
                if ( url != null && !"".equals( url ) ) {
                    try {
                        URL resolved = configAdapter.resolve( url );
                        File f = new File( resolved.getFile() );
                        this.copyrightKey = TexturePool.addTexture( f );
                        Double cs = copy.getPercentageOfResult();
                        if ( cs != null ) {
                            // this.copyrighScale = copy.getPercentageOfResult() * 0.01;
                            LOG.warn( "Copyright scaling will be ignored, please make your copyright image your preferred size." );
                        }
                    } catch ( MalformedURLException e ) {
                        LOG.error( "Unable to load copyright image from: " + url + " because: "
                                   + e.getLocalizedMessage(), e );
                    }

                }
            }
        }
    }

    /**
     * @param dsd
     */
    private void initValuesFromDatasetDefintions( DatasetDefinitions dsd ) {
        defaultCRS = new CRS( dsd.getBoundingBox().getCrs() );
        TranslationToLocalCRS translationToLocalCRS = dsd.getTranslationToLocalCRS();
        if ( translationToLocalCRS != null ) {
            this.translationToLocalCRS = new double[] { translationToLocalCRS.getX(), translationToLocalCRS.getY() };
        } else {
            this.translationToLocalCRS = new double[] { 0, 0 };
        }
        translateDDSBBox( dsd );
    }

    /**
     * @param dsd
     */
    private void translateDDSBBox( DatasetDefinitions dsd ) {
        BoundingBoxType bbt = dsd.getBoundingBox();
        List<Double> lowerCorner = bbt.getLowerCorner();
        List<Double> upperCorner = bbt.getUpperCorner();
        if ( lowerCorner.size() != upperCorner.size() ) {
            throw new IllegalArgumentException( "LowerCorner must be of same dimension as upperCorner." );
        }
        for ( int i = 0; i < lowerCorner.size(); ++i ) {
            double translation = ( i < translationToLocalCRS.length ) ? translationToLocalCRS[i] : 0;
            lowerCorner.set( i, translation + lowerCorner.get( i ) );
            upperCorner.set( i, translation + upperCorner.get( i ) );
        }
        dsd.setBoundingBox( bbt );

    }

    /**
     * @param configAdapter
     * @param dsd
     */
    private void initBackgroundImages( XMLAdapter configAdapter ) {
        SkyImages images = serviceConfiguration.getSkyImages();
        if ( images != null ) {
            List<SkyImage> skyImage = images.getSkyImage();
            if ( !skyImage.isEmpty() ) {
                for ( SkyImage image : skyImage ) {
                    if ( image != null && image.getName() != null && image.getFile() != null ) {
                        String name = image.getName();
                        String file = image.getFile();
                        try {
                            URL fileURL = configAdapter.resolve( file );
                            File f = new File( fileURL.getFile() );
                            TexturePool.addTexture( name, f );
                        } catch ( MalformedURLException e ) {
                            LOG.error( "Unable to load sky image: " + name + " because: " + e.getLocalizedMessage(), e );
                        }
                    }
                }
            }
        }
    }

    /**
     * @param dsd
     * @throws ServiceInitException
     */
    private void initDatasets( XMLAdapter configAdapter, DatasetDefinitions dsd )
                            throws ServiceInitException {
        buildingDatasets = new BuildingsDatasetWrapper( defaultCRS, this.translationToLocalCRS, configAdapter, dsd );

        treesDatasets = new TreesDatasetWrapper( defaultCRS, this.translationToLocalCRS, configAdapter, dsd );

        textureByteBufferPool = new DirectByteBufferPool( StaticConfiguration.maxDirectByteBufferMemory,
                                                          StaticConfiguration.numberOfDirectBuffers );
        textureDatasets = new TextureDatasetWrapper( defaultCRS, this.translationToLocalCRS, configAdapter, dsd,
                                                     textureByteBufferPool, StaticConfiguration.maxTexturesInMemory,
                                                     StaticConfiguration.maxCachedTextureTiles,
                                                     StaticConfiguration.maxTexturesInGPU );

        demDatasets = new DemDatasetWrapper( defaultCRS, this.translationToLocalCRS, configAdapter, dsd,
                                             StaticConfiguration.numberOfDEMFragmentsCached );

        List<TerrainRenderingManager> matchingDatasourceObjects = demDatasets.getMatchingDatasourceObjects(
                                                                                                            demDatasets.datasetNames(),
                                                                                                            null );
        if ( matchingDatasourceObjects.isEmpty() ) {
            throw new ServiceInitException( "No elevationmodels configured, this may not be." );
        }
        defaultDEMRenderer = matchingDatasourceObjects.get( 0 );
    }

    /**
     * @param offscreenBuffer
     */
    private void initGL() {
        int usedTextureUnits = Math.max( 8, textureDatasets.size() );
        configuredOpenGLInitValues = new ConfiguredOpenGLInitValues( usedTextureUnits );
        offscreenBuffer = this.pBufferPool.getOffscreenBuffer( null );
        offscreenBuffer.addGLEventListener( configuredOpenGLInitValues );

    }

    /**
     * 
     * @param bbt
     * @param defaultCRS
     * @param translationToLocalCRS
     * @return the envelope created from the boundingbox type.
     */
    public static Envelope createEnvelope( BoundingBoxType bbt, CRS defaultCRS, double[] translationToLocalCRS ) {
        if ( bbt == null ) {
            return null;
        }
        List<Double> lowerCorner = bbt.getLowerCorner();
        List<Double> upperCorner = bbt.getUpperCorner();
        if ( lowerCorner.size() != upperCorner.size() ) {
            throw new IllegalArgumentException( "LowerCorner must be of same dimension as upperCorner." );
        }
        double[] lc = new double[lowerCorner.size()];
        double[] uc = new double[upperCorner.size()];
        for ( int i = 0; i < lc.length; ++i ) {
            double translation = ( translationToLocalCRS == null || i >= translationToLocalCRS.length ) ? 0
                                                                                                       : translationToLocalCRS[i];
            lc[i] = translation + lowerCorner.get( i );
            uc[i] = translation + upperCorner.get( i );
        }
        return geomFactory.createEnvelope( lc, uc, defaultCRS );
    }

    /**
     * @return the configured max far clipping plane.
     */
    public double getFarClippingPlane() {
        return farClippingPlane;
    }

    /**
     * @return the serviceConfiguration
     */
    public final ServiceConfiguration getServiceConfiguration() {
        return serviceConfiguration;
    }

    /**
     * @param datasetNames
     * @param viewParams
     * @return all modelRenderers which intersect with the given parameters and have the given names.
     */
    public List<TreeRenderer> getTreeRenderers( Collection<String> datasetNames, ViewParams viewParams ) {
        return treesDatasets.getMatchingDatasourceObjects( datasetNames, viewParams );
    }

    /**
     * @param viewParams
     * @return all modelRenderers (independent of dataset name) which intersect with the given parameters.
     */
    public List<TreeRenderer> getTreeRenderers( ViewParams viewParams ) {
        return getTreeRenderers( treesDatasets.datasetNames(), viewParams );
    }

    /**
     * @return all treeRenderers (independent of dataset name).
     */
    public List<TreeRenderer> getAllTreeRenderers() {
        return treesDatasets.getAllDatasourceObjects();
    }

    /**
     * @return all building Renderers (independent of dataset name).
     */
    public List<BuildingRenderer> getAllBuildingRenderers() {
        return buildingDatasets.getAllDatasourceObjects();
    }

    /**
     * @param datasetNames
     * @param viewParams
     * @return all modelRenderers which intersect with the given parameters and have the given names.
     */
    public List<BuildingRenderer> getBuildingRenderers( Collection<String> datasetNames, ViewParams viewParams ) {
        return buildingDatasets.getMatchingDatasourceObjects( datasetNames, viewParams );
    }

    /**
     * @param viewParams
     * @return all modelRenderers (independent of dataset name) which intersect with the given parameters.
     */
    public List<BuildingRenderer> getBuildingRenderers( ViewParams viewParams ) {
        return getBuildingRenderers( buildingDatasets.datasetNames(), viewParams );
    }

    /**
     * @param datasetNames
     * @param viewParams
     * @return all Texture Managers which intersect with the given parameters and have the given names.
     */
    public List<TextureManager> getTextureManagers( Collection<String> datasetNames, ViewParams viewParams ) {
        return textureDatasets.getMatchingDatasourceObjects( datasetNames, viewParams );
    }

    /**
     * @param viewParams
     * @return all texture managers (independent of dataset name) which intersect with the given parameters.
     */
    public List<TextureManager> getTextureManagers( ViewParams viewParams ) {
        return getTextureManagers( textureDatasets.datasetNames(), viewParams );
    }

    /**
     * @param elevationModelName
     * @param viewParams
     * @return all Texture Managers which intersect with the given parameters and have the given names.
     */
    public List<TerrainRenderingManager> getDEMRenderers( String elevationModelName, ViewParams viewParams ) {
        List<String> elevNames = new ArrayList<String>( 1 );
        elevNames.add( elevationModelName );
        return demDatasets.getMatchingDatasourceObjects( elevNames, viewParams );
    }

    /**
     * Retrieve the requested datasets and render the result.
     * 
     * @param request
     * @return the rendered image.
     * @throws OWSException
     */
    public final BufferedImage getPerspectiveViewImage( GetView request )
                            throws OWSException {
        ViewParams viewParams = request.getViewParameters();
        updateMaxWidthAndHeight( viewParams );
        TerrainRenderingManager demRenderer = defaultDEMRenderer;
        List<TextureManager> textureManagers = getTextureManagers( request.getDatasets(), viewParams );
        List<BuildingRenderer> buildingRenders = getBuildingRenderers( request.getDatasets(), viewParams );
        List<TreeRenderer> treeRenderers = getTreeRenderers( request.getDatasets(), viewParams );
        PooledByteBuffer imageBuffer = this.resultImagePool.allocate( resultImageSize );
        RenderContext context = new RenderContext( viewParams, request.getSceneParameters().getScale(),
                                                   this.maxTextureSize,
                                                   configuredOpenGLInitValues.getShaderProgramIds() );
        GetViewRenderer renderer = new GetViewRenderer( request, context, imageBuffer, demRenderer, textureManagers,
                                                        buildingRenders, treeRenderers, this.copyrightKey,
                                                        this.copyrighScale, StaticConfiguration.latitudeOfScene );

        synchronized ( offscreenBuffer ) {
            offscreenBuffer.addGLEventListener( renderer );
            try {
                offscreenBuffer.display();
            } catch ( Throwable t ) {
                LOG.error( "aargh", t );
                throw new OWSException( "An error occurred while rendering the GetView requested scene: "
                                        + t.getLocalizedMessage(), t, ControllerException.NO_APPLICABLE_CODE );
            } finally {
                offscreenBuffer.removeGLEventListener( renderer );
            }

            offscreenBuffer.notifyAll();
        }
        this.resultImagePool.deallocate( imageBuffer );
        return renderer.getResultImage();
    }

    /**
     * Update the width and height to the configured ones.
     * 
     * @param viewParams
     * @throws OWSException
     */
    private void updateMaxWidthAndHeight( ViewParams viewParams )
                            throws OWSException {
        int width = viewParams.getScreenPixelsX();
        int height = viewParams.getScreenPixelsY();
        if ( width > this.maxRequestWidth || height > this.maxRequestHeight ) {
            StringBuilder errorMessage = new StringBuilder( "Requested" );
            if ( width > this.maxRequestWidth ) {
                errorMessage.append( " width: " ).append( width ).append( " exceeds maximum request width: " ).append(
                                                                                                                       maxRequestWidth );
            }
            if ( height > this.maxRequestHeight ) {
                if ( width > this.maxRequestWidth ) {
                    errorMessage.append( "," );
                }
                errorMessage.append( " height: " ).append( height ).append( " exceeds maximum request height: " ).append(
                                                                                                                          maxRequestHeight );
            }
            throw new OWSException( errorMessage.toString(), OWSException.INVALID_PARAMETER_VALUE );
            // double scale = ( width > height ) ? ( ( (double) this.maxRequestWidth ) / width )
            // : ( ( (double) this.maxRequestHeight ) / height );
            // viewParams.setScreenDimensions( (int) Math.floor( width * scale ), (int) Math.floor( height * scale ) );
        }

    }

    /**
     * 
     * The <code>StaticConfiguration</code> class needs to be converged with the configuration.
     * 
     * @author <a href="mailto:bezema@lat-lon.de">Rutger Bezema</a>
     * @author last edited by: $Author$
     * @version $Revision$, $Date$
     * 
     */
    private static final class StaticConfiguration {
        static final int maxTexturesInMemory = 200;

        static final int maxTexturesInGPU = 200;

        static final int maxCachedTextureTiles = 100;

        static final int numberOfDirectBuffers = 500;

        static final int maxDirectByteBufferMemory = 100 * 1024 * 1024;// 100MB

        static final int numberOfDEMFragmentsCached = 200;

        static final int numberOfResultImageBuffers = 25;

        static final double latitudeOfScene = 51.7;

    }

    /**
     * @return the configured translation vector.
     */
    public double[] getTranslationVector() {
        return this.translationToLocalCRS;
    }

    /**
     * @return the configured near clippingplane.
     */
    public double getNearClippingPlane() {
        return nearClippingPlane;
    }

    /**
     * @return the copyrightKey
     */
    public final String getCopyrightKey() {
        return copyrightKey;
    }

}
